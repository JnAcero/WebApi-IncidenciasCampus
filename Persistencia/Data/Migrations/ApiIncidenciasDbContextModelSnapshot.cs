// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ApiIncidenciasDbContext))]
    partial class ApiIncidenciasDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Descripcion = "Area donde se dan las clases de progrmacion",
                            NombreArea = "Area de Training"
                        },
                        new
                        {
                            Id = 1,
                            Descripcion = "Zona de estudio personal al lado de hunters",
                            NombreArea = "Review 1"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Zona de estudio personal al lado de training",
                            NombreArea = "Review 2"
                        });
                });

            modelBuilder.Entity("Dominio.Models.CategoriaIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoriasIncidencias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "Software"
                        },
                        new
                        {
                            Id = 2,
                            Categoria = "Hardware"
                        });
                });

            modelBuilder.Entity("Dominio.Models.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DptoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DptoId");

                    b.ToTable("Ciudades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DptoId = 1,
                            Nombre = "Bucaramanga"
                        },
                        new
                        {
                            Id = 2,
                            DptoId = 1,
                            Nombre = "Floridablanca"
                        },
                        new
                        {
                            Id = 3,
                            DptoId = 1,
                            Nombre = "Giron"
                        },
                        new
                        {
                            Id = 4,
                            DptoId = 1,
                            Nombre = "Piedecuesta"
                        });
                });

            modelBuilder.Entity("Dominio.Models.ComponenteHardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("varchar(280)");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaMantenimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TipoHardwareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId");

                    b.HasIndex("TipoHardwareId");

                    b.ToTable("ComponentesHardware");
                });

            modelBuilder.Entity("Dominio.Models.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("Dominio.Models.Dpto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("Dptos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Santander",
                            PaisId = 1
                        });
                });

            modelBuilder.Entity("Dominio.Models.EmailTrainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<int>("TipoEmailId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TrainerId", "TipoEmailId");

                    b.HasIndex("TipoEmailId");

                    b.ToTable("EmailsTrainers");
                });

            modelBuilder.Entity("Dominio.Models.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EspecificacionesTecnicas")
                        .HasMaxLength(280)
                        .HasColumnType("varchar(280)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("SistemaOperativo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("Dominio.Models.EquipoSoftware", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EquipoId", "SoftwareId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("EquipoSSoftwares");
                });

            modelBuilder.Entity("Dominio.Models.GravedadIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Gravedad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GravedadesIncidencias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gravedad = "Leve"
                        },
                        new
                        {
                            Id = 2,
                            Gravedad = "Moderada"
                        },
                        new
                        {
                            Id = 3,
                            Gravedad = "Grave"
                        });
                });

            modelBuilder.Entity("Dominio.Models.Incidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(280)");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoIncidencia")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("FechaReporte")
                        .HasColumnType("date");

                    b.Property<int>("GravedadIncidenciaId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("GravedadIncidenciaId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Incidencias");
                });

            modelBuilder.Entity("Dominio.Models.IncidenciaComponenteH", b =>
                {
                    b.Property<int>("ComponenteHardwareId")
                        .HasColumnType("int");

                    b.Property<int>("IncidenciaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("ComponenteHardwareId", "IncidenciaId");

                    b.HasIndex("IncidenciaId");

                    b.ToTable("IncidenciasComponentesH");
                });

            modelBuilder.Entity("Dominio.Models.IncidenciaSoftware", b =>
                {
                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<int>("IncidenciaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("SoftwareId", "IncidenciaId");

                    b.HasIndex("IncidenciaId");

                    b.ToTable("IncidenciasSoftwares");
                });

            modelBuilder.Entity("Dominio.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Paises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Colombia"
                        });
                });

            modelBuilder.Entity("Dominio.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Dominio.Models.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CantidadEquipos")
                        .HasColumnType("int");

                    b.Property<string>("NombreSalon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Salones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 3,
                            CantidadEquipos = 25,
                            NombreSalon = "Apolo"
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 3,
                            CantidadEquipos = 25,
                            NombreSalon = "Sputnik"
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 3,
                            CantidadEquipos = 25,
                            NombreSalon = "Artemis"
                        });
                });

            modelBuilder.Entity("Dominio.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TipoSofwareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoSofwareId");

                    b.ToTable("Softwares");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Framework de Microsoft para desarrollo de microservicios, desarrollo web, entre otros",
                            Nombre = ".NET Framework",
                            TipoSofwareId = 4
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Navegador web",
                            Nombre = "Chrome",
                            TipoSofwareId = 4
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Discord es un servicio de mensajería instantánea y chat de voz VolP. En esta plataforma, los usuarios tienen la capacidad de comunicarse por llamadas de voz, videollamadas, mensajes de texto etc",
                            Nombre = "Discord",
                            TipoSofwareId = 2
                        });
                });

            modelBuilder.Entity("Dominio.Models.TelefonoTrainer", b =>
                {
                    b.Property<int>("TipoTelefonoId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("TipoTelefonoId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TelefonosTrainers");
                });

            modelBuilder.Entity("Dominio.Models.TipoEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposEmail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tipo = "Email Personal"
                        },
                        new
                        {
                            Id = 2,
                            Tipo = "Email Empresarial"
                        });
                });

            modelBuilder.Entity("Dominio.Models.TipoHardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreHardware")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposHardware");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreHardware = "Teclado"
                        },
                        new
                        {
                            Id = 2,
                            NombreHardware = "Mouse"
                        },
                        new
                        {
                            Id = 4,
                            NombreHardware = "Pantalla"
                        },
                        new
                        {
                            Id = 3,
                            NombreHardware = "Diadema"
                        },
                        new
                        {
                            Id = 5,
                            NombreHardware = "CPU"
                        });
                });

            modelBuilder.Entity("Dominio.Models.TipoSoftware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoSoftware");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Tipo = "Aplicacion"
                        },
                        new
                        {
                            Id = 3,
                            Tipo = "Gestion"
                        },
                        new
                        {
                            Id = 4,
                            Tipo = "Programacion"
                        },
                        new
                        {
                            Id = 1,
                            Tipo = "Sistema"
                        });
                });

            modelBuilder.Entity("Dominio.Models.TipoTelefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposTelefono");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Tipo = "Telefono empresarial"
                        },
                        new
                        {
                            Id = 1,
                            Tipo = "Telefono personal"
                        });
                });

            modelBuilder.Entity("Dominio.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaNacimineto")
                        .HasColumnType("date");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Dominio.Models.TrainerContacto", b =>
                {
                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<int>("ContactoId")
                        .HasColumnType("int");

                    b.HasKey("TrainerId", "ContactoId");

                    b.HasIndex("ContactoId");

                    b.ToTable("TrainersContactos");
                });

            modelBuilder.Entity("Dominio.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Dominio.Models.UsuarioRol", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UsuarioRol");
                });

            modelBuilder.Entity("Dominio.Models.Ciudad", b =>
                {
                    b.HasOne("Dominio.Models.Dpto", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("DptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Dominio.Models.ComponenteHardware", b =>
                {
                    b.HasOne("Dominio.Models.Equipo", "Equipo")
                        .WithMany("ComponentesHardware")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.TipoHardware", "TipoHardware")
                        .WithMany("Hardwares")
                        .HasForeignKey("TipoHardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");

                    b.Navigation("TipoHardware");
                });

            modelBuilder.Entity("Dominio.Models.Dpto", b =>
                {
                    b.HasOne("Dominio.Models.Pais", "Pais")
                        .WithMany("Dptos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.Models.EmailTrainer", b =>
                {
                    b.HasOne("Dominio.Models.TipoEmail", "TipoEmail")
                        .WithMany("Emails")
                        .HasForeignKey("TipoEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Trainer", "Trainer")
                        .WithMany("EmailsTrainer")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEmail");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Dominio.Models.Equipo", b =>
                {
                    b.HasOne("Dominio.Models.Salon", "Salon")
                        .WithMany("Equipos")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("Dominio.Models.EquipoSoftware", b =>
                {
                    b.HasOne("Dominio.Models.Equipo", "Equipo")
                        .WithMany("EquiposSoftwares")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Software", "Software")
                        .WithMany("EquiposSoftwares")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Dominio.Models.Incidencia", b =>
                {
                    b.HasOne("Dominio.Models.CategoriaIncidencia", "CategoriaIncidencia")
                        .WithMany("Incidencias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Equipo", "Equipo")
                        .WithMany("Incidencias")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.GravedadIncidencia", "GravedadIncidenciaIncidencia")
                        .WithMany("Incidencias")
                        .HasForeignKey("GravedadIncidenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Trainer", "Trainer")
                        .WithMany("Incidencias")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaIncidencia");

                    b.Navigation("Equipo");

                    b.Navigation("GravedadIncidenciaIncidencia");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Dominio.Models.IncidenciaComponenteH", b =>
                {
                    b.HasOne("Dominio.Models.ComponenteHardware", "ComponenteH")
                        .WithMany("IncidenciasComponentesH")
                        .HasForeignKey("ComponenteHardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Incidencia", "Incidencia")
                        .WithMany("IncidenciasComponentesH")
                        .HasForeignKey("IncidenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponenteH");

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("Dominio.Models.IncidenciaSoftware", b =>
                {
                    b.HasOne("Dominio.Models.Incidencia", "Incidencia")
                        .WithMany("IncidenciasSoftwares")
                        .HasForeignKey("IncidenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Software", "Software")
                        .WithMany("IncidenciasSoftwares")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incidencia");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Dominio.Models.Salon", b =>
                {
                    b.HasOne("Dominio.Models.Area", "Area")
                        .WithMany("Salones")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Dominio.Models.Software", b =>
                {
                    b.HasOne("Dominio.Models.TipoSoftware", "TipoSoftware")
                        .WithMany("Softwares")
                        .HasForeignKey("TipoSofwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoSoftware");
                });

            modelBuilder.Entity("Dominio.Models.TelefonoTrainer", b =>
                {
                    b.HasOne("Dominio.Models.TipoTelefono", "TipoTelefono")
                        .WithMany("Telefonos")
                        .HasForeignKey("TipoTelefonoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Trainer", "Trainer")
                        .WithMany("TelefonosTrainer")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoTelefono");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Dominio.Models.Trainer", b =>
                {
                    b.HasOne("Dominio.Models.Ciudad", "Ciudad")
                        .WithMany("Trainers")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Dominio.Models.TrainerContacto", b =>
                {
                    b.HasOne("Dominio.Models.Contacto", "Contacto")
                        .WithMany("ContactosTrainers")
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Trainer", "Trainer")
                        .WithMany("ContactosTrainers")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Dominio.Models.Usuario", b =>
                {
                    b.HasOne("Dominio.Models.Trainer", "Trainer")
                        .WithOne("Usuario")
                        .HasForeignKey("Dominio.Models.Usuario", "TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Dominio.Models.UsuarioRol", b =>
                {
                    b.HasOne("Dominio.Models.Rol", "Rol")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Models.Usuario", "Usuario")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Models.Area", b =>
                {
                    b.Navigation("Salones");
                });

            modelBuilder.Entity("Dominio.Models.CategoriaIncidencia", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Dominio.Models.Ciudad", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Dominio.Models.ComponenteHardware", b =>
                {
                    b.Navigation("IncidenciasComponentesH");
                });

            modelBuilder.Entity("Dominio.Models.Contacto", b =>
                {
                    b.Navigation("ContactosTrainers");
                });

            modelBuilder.Entity("Dominio.Models.Dpto", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.Models.Equipo", b =>
                {
                    b.Navigation("ComponentesHardware");

                    b.Navigation("EquiposSoftwares");

                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Dominio.Models.GravedadIncidencia", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Dominio.Models.Incidencia", b =>
                {
                    b.Navigation("IncidenciasComponentesH");

                    b.Navigation("IncidenciasSoftwares");
                });

            modelBuilder.Entity("Dominio.Models.Pais", b =>
                {
                    b.Navigation("Dptos");
                });

            modelBuilder.Entity("Dominio.Models.Rol", b =>
                {
                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("Dominio.Models.Salon", b =>
                {
                    b.Navigation("Equipos");
                });

            modelBuilder.Entity("Dominio.Models.Software", b =>
                {
                    b.Navigation("EquiposSoftwares");

                    b.Navigation("IncidenciasSoftwares");
                });

            modelBuilder.Entity("Dominio.Models.TipoEmail", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("Dominio.Models.TipoHardware", b =>
                {
                    b.Navigation("Hardwares");
                });

            modelBuilder.Entity("Dominio.Models.TipoSoftware", b =>
                {
                    b.Navigation("Softwares");
                });

            modelBuilder.Entity("Dominio.Models.TipoTelefono", b =>
                {
                    b.Navigation("Telefonos");
                });

            modelBuilder.Entity("Dominio.Models.Trainer", b =>
                {
                    b.Navigation("ContactosTrainers");

                    b.Navigation("EmailsTrainer");

                    b.Navigation("Incidencias");

                    b.Navigation("TelefonosTrainer");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Models.Usuario", b =>
                {
                    b.Navigation("UsuariosRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
